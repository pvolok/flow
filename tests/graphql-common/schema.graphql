type Query {
  union: StoryOrEvent
  version: String
}

type User implements Node {
  id: ID!
  name: String!
  friends(first: Int): [User!]
}

type Story implements Node {
  id: ID!
  text: String!
  tags: [String!]
  author: User
}

type Event implements Node {
  id: ID!
  date: String
}

interface Node {
  id: ID!
}

union StoryOrEvent = Story | Event

input MessageInput {
  text: String!
  tags: [String!]
}

type Mutation {
  likeStory(storyID: ID!, inc: Int!): String
  postMessage(msg: MessageInput!): ID!
}

directive @relay(plural: Boolean! = false) on FRAGMENT_DEFINITION

directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @on_query on QUERY
directive @on_mutation on MUTATION
directive @on_subscription on SUBSCRIPTION
directive @on_field on FIELD
directive @on_fragment_definition on FRAGMENT_DEFINITION
directive @on_fragment_spread on FRAGMENT_SPREAD
directive @on_inline_fragment on INLINE_FRAGMENT

schema {
  mutation: Mutation
}
